<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"> <head>  <title>Process and store</title> </head><body><?php// Check that user sent some data to begin with. if (isset($_REQUEST['_itemName'])) {    /* Sanitize input. Trust *nothing* sent by the client.     * When possible use whitelisting, only allow characters that you know     * are needed. If username must contain only alphanumeric characters,     * without puntation, then you should not accept anything else.     * For more details, see: https://stackoverflow.com/a/10094315     */    $_itemName=preg_replace('/[^a-zA-Z0-9\ ]/','',$_REQUEST['_itemName']);    /* Escape your input: use htmlspecialchars to avoid most obvious XSS attacks.     * Note: Your application may still be vulnerable to XSS if you use $_itemName     *       in an attribute without proper quoting.     * For more details, see: https://stackoverflow.com/a/130323     */    $_itemName=htmlspecialchars($_itemName);} else {    die('User did not send any data to be saved!');}// Define MySQL connection and credentials$pdo_dsn='mysql:dbname=yourdatabase;host=databasehost.example.com';$pdo_user='yourdatabaseuser';     $pdo_password='yourdatabaspassword';  try {    // Establish connection to database    $conn = new PDO($pdo_dsn, $pdo_user, $pdo_password);    // Throw exceptions in case of error.    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);    // Use prepared statements to mitigate SQL injection attacks.    // See https://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php for more details    $qry=$conn->prepare('INSERT INTO yourtable (yourcolumn) VALUES (:yourvalue)');    // Execute the prepared statement using user supplied data.    $qry->execute(Array(":yourvalue" => $_itemName));} catch (PDOException $e) {    echo 'Error: ' . $e->getMessage() . " file: " . $e->getFile() . " line: " . $e->getLine();    exit;}?><form method="post"> <!-- Please note that the quotes around next <?php ... ?> block are important      to avoid XSS issues with poorly escaped user input. For more details:      https://stackoverflow.com/a/2894530  --> <input type="text" name="_itemName" value="<?php print $_itemName; ?>"> <input type="submit" name="saveTask" value="save"></form></body></html>